"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/vault/page",{

/***/ "(app-pages-browser)/./src/lib/crypto.ts":
/*!***************************!*\
  !*** ./src/lib/crypto.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculatePasswordEntropy: function() { return /* binding */ calculatePasswordEntropy; },\n/* harmony export */   decryptVaultItem: function() { return /* binding */ decryptVaultItem; },\n/* harmony export */   encryptVaultItem: function() { return /* binding */ encryptVaultItem; },\n/* harmony export */   estimateTimeToCrack: function() { return /* binding */ estimateTimeToCrack; },\n/* harmony export */   exportVaultData: function() { return /* binding */ exportVaultData; },\n/* harmony export */   generateRandomKey: function() { return /* binding */ generateRandomKey; },\n/* harmony export */   generateSecureId: function() { return /* binding */ generateSecureId; },\n/* harmony export */   generateSecurePassword: function() { return /* binding */ generateSecurePassword; },\n/* harmony export */   hashPassword: function() { return /* binding */ hashPassword; },\n/* harmony export */   importVaultData: function() { return /* binding */ importVaultData; },\n/* harmony export */   isCryptoAvailable: function() { return /* binding */ isCryptoAvailable; },\n/* harmony export */   validatePasswordStrength: function() { return /* binding */ validatePasswordStrength; }\n/* harmony export */ });\n// frontend/src/lib/crypto.ts\n/**\r\n * Client-side encryption using Web Crypto API\r\n * \r\n * Encryption Strategy:\r\n * - AES-GCM 256-bit encryption for vault data\r\n * - PBKDF2 with 100,000 iterations for key derivation\r\n * - Random salt and IV for each encryption operation\r\n * - Zero-knowledge architecture: server never sees plaintext\r\n */ /**\r\n * Derive encryption key from master password using PBKDF2\r\n */ async function deriveKey(masterPassword, salt) {\n    const encoder = new TextEncoder();\n    // Import the master password as key material\n    const keyMaterial = await crypto.subtle.importKey(\"raw\", encoder.encode(masterPassword), \"PBKDF2\", false, [\n        \"deriveBits\",\n        \"deriveKey\"\n    ]);\n    // Derive AES-GCM key using PBKDF2\n    return crypto.subtle.deriveKey({\n        name: \"PBKDF2\",\n        // cast to BufferSource to satisfy TypeScript lib differences\n        salt: salt,\n        iterations: 100000,\n        hash: \"SHA-256\"\n    }, keyMaterial, {\n        name: \"AES-GCM\",\n        length: 256\n    }, true, [\n        \"encrypt\",\n        \"decrypt\"\n    ]);\n}\n/**\r\n * Encrypt vault item data\r\n */ async function encryptVaultItem(data, masterPassword) {\n    const encoder = new TextEncoder();\n    // Generate random salt and IV\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    // Derive encryption key\n    const key = await deriveKey(masterPassword, salt);\n    // Encrypt the data\n    const encrypted = await crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: iv\n    }, key, encoder.encode(JSON.stringify(data)));\n    // Convert to base64 for storage\n    return {\n        encrypted: arrayBufferToBase64(encrypted),\n        salt: arrayBufferToBase64(salt),\n        iv: arrayBufferToBase64(iv)\n    };\n}\n/**\r\n * Decrypt vault item data\r\n */ async function decryptVaultItem(encryptedData, masterPassword) {\n    const decoder = new TextDecoder();\n    // Convert from base64\n    const salt = base64ToArrayBuffer(encryptedData.salt);\n    const iv = base64ToArrayBuffer(encryptedData.iv);\n    const encrypted = base64ToArrayBuffer(encryptedData.encrypted);\n    // Derive decryption key\n    const key = await deriveKey(masterPassword, salt);\n    // Decrypt the data\n    const decrypted = await crypto.subtle.decrypt({\n        name: \"AES-GCM\",\n        iv: iv\n    }, key, encrypted);\n    // Parse and return the data\n    return JSON.parse(decoder.decode(decrypted));\n}\nfunction generateSecurePassword(options) {\n    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const numbers = \"0123456789\";\n    const symbols = \"!@#$%^&*()_+-=[]{}|;:,.<>?\";\n    const ambiguous = \"il1Lo0O\";\n    // Build character set\n    let charset = lowercase + uppercase;\n    if (options.includeNumbers) charset += numbers;\n    if (options.includeSymbols) charset += symbols;\n    // Remove ambiguous characters if requested\n    if (options.excludeAmbiguous) {\n        charset = charset.split(\"\").filter((c)=>!ambiguous.includes(c)).join(\"\");\n    }\n    // Generate password using crypto.getRandomValues for security\n    let password = \"\";\n    const randomValues = new Uint32Array(options.length);\n    crypto.getRandomValues(randomValues);\n    for(let i = 0; i < options.length; i++){\n        password += charset[randomValues[i] % charset.length];\n    }\n    return password;\n}\n/**\r\n * Hash password for authentication (client-side pre-hash)\r\n * Note: This is NOT for vault encryption, only for auth\r\n */ async function hashPassword(password) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password);\n    const hash = await crypto.subtle.digest(\"SHA-256\", data);\n    return arrayBufferToBase64(hash);\n}\n/**\r\n * Validate master password strength\r\n */ function validatePasswordStrength(password) {\n    const errors = [];\n    if (password.length < 12) {\n        errors.push(\"Password must be at least 12 characters long\");\n    }\n    if (!/[a-z]/.test(password)) {\n        errors.push(\"Password must contain lowercase letters\");\n    }\n    if (!/[A-Z]/.test(password)) {\n        errors.push(\"Password must contain uppercase letters\");\n    }\n    if (!/[0-9]/.test(password)) {\n        errors.push(\"Password must contain numbers\");\n    }\n    if (!/[^a-zA-Z0-9]/.test(password)) {\n        errors.push(\"Password must contain special characters\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n/**\r\n * Utility function: Convert ArrayBuffer to Base64 string\r\n */ function arrayBufferToBase64(buffer) {\n    // Normalize to Uint8Array view\n    const bytes = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    let binary = \"\";\n    const chunkSize = 0x8000; // safe chunk to avoid call stack issues\n    for(let i = 0; i < bytes.length; i += chunkSize){\n        const chunk = bytes.subarray(i, i + chunkSize);\n        binary += String.fromCharCode.apply(null, Array.from(chunk));\n    }\n    return btoa(binary);\n}\n/**\r\n * Utility function: Convert Base64 string to Uint8Array\r\n */ function base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for(let i = 0; i < binary.length; i++){\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\n/**\r\n * Generate a random encryption key (for testing/demo purposes)\r\n */ async function generateRandomKey() {\n    return crypto.subtle.generateKey({\n        name: \"AES-GCM\",\n        length: 256\n    }, true, [\n        \"encrypt\",\n        \"decrypt\"\n    ]);\n}\n/**\r\n * Calculate password entropy (bits of randomness)\r\n */ function calculatePasswordEntropy(password) {\n    let charsetSize = 0;\n    if (/[a-z]/.test(password)) charsetSize += 26;\n    if (/[A-Z]/.test(password)) charsetSize += 26;\n    if (/[0-9]/.test(password)) charsetSize += 10;\n    if (/[^a-zA-Z0-9]/.test(password)) charsetSize += 32; // Approximate\n    return Math.log2(Math.pow(charsetSize, password.length));\n}\n/**\r\n * Estimate time to crack password (in years)\r\n */ function estimateTimeToCrack(password) {\n    const entropy = calculatePasswordEntropy(password);\n    const guessesPerSecond = 1e9; // 1 billion guesses per second\n    const secondsToCrack = Math.pow(2, entropy) / guessesPerSecond;\n    const yearsToCrack = secondsToCrack / (365.25 * 24 * 60 * 60);\n    let timeToCrack;\n    let strength;\n    if (yearsToCrack < 0.001) {\n        timeToCrack = \"Instantly\";\n        strength = \"Very Weak\";\n    } else if (yearsToCrack < 1) {\n        timeToCrack = \"\".concat(Math.round(yearsToCrack * 365), \" days\");\n        strength = \"Weak\";\n    } else if (yearsToCrack < 1000) {\n        timeToCrack = \"\".concat(Math.round(yearsToCrack), \" years\");\n        strength = \"Moderate\";\n    } else if (yearsToCrack < 1000000) {\n        timeToCrack = \"\".concat(Math.round(yearsToCrack / 1000), \"K years\");\n        strength = \"Strong\";\n    } else {\n        timeToCrack = \"\".concat(Math.round(yearsToCrack / 1000000), \"M years\");\n        strength = \"Very Strong\";\n    }\n    return {\n        entropy: Math.round(entropy),\n        timeToCrack,\n        strength\n    };\n}\n/**\r\n * Export vault data (encrypted)\r\n */ async function exportVaultData(items, masterPassword) {\n    const exportData = {\n        version: 1,\n        timestamp: new Date().toISOString(),\n        items: await Promise.all(items.map((item)=>encryptVaultItem(item, masterPassword)))\n    };\n    return JSON.stringify(exportData, null, 2);\n}\n/**\r\n * Import vault data (decrypt)\r\n */ async function importVaultData(exportedData, masterPassword) {\n    try {\n        const data = JSON.parse(exportedData);\n        if (!data.version || !data.items) {\n            throw new Error(\"Invalid export file format\");\n        }\n        const items = await Promise.all(data.items.map((encryptedItem)=>decryptVaultItem(encryptedItem, masterPassword)));\n        return items;\n    } catch (error) {\n        throw new Error(\"Failed to import vault data. Check your master password.\");\n    }\n}\n/**\r\n * Check if Web Crypto API is available\r\n */ function isCryptoAvailable() {\n    return  true && typeof window.crypto !== \"undefined\" && typeof window.crypto.subtle !== \"undefined\";\n}\n/**\r\n * Generate a secure random ID\r\n */ function generateSecureId() {\n    let length = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 16;\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return Array.from(array, (byte)=>byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/crypto.ts\n"));

/***/ })

});